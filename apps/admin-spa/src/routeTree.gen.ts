// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LanguagesImport } from './routes/languages'
import { Route as CategoriesImport } from './routes/categories'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as ProductsIndexImport } from './routes/products/index'
import { Route as AttributeGroupsIndexImport } from './routes/attribute-groups/index'
import { Route as ProductsNewImport } from './routes/products/new'
import { Route as LanguagesNewImport } from './routes/languages/new'
import { Route as CategoriesNewImport } from './routes/categories/new'
import { Route as AttributeGroupsNewImport } from './routes/attribute-groups/new'
import { Route as AttributeGroupsAttributeGroupIdImport } from './routes/attribute-groups/$attributeGroupId'
import { Route as LanguagesLanguageIdEditImport } from './routes/languages/$languageId.edit'
import { Route as CategoriesCategoryIdEditImport } from './routes/categories/$categoryId.edit'
import { Route as AttributeGroupsAttributeGroupIdEditImport } from './routes/attribute-groups/$attributeGroupId.edit'
import { Route as AttributeGroupsAttributeGroupIdAttributeNewImport } from './routes/attribute-groups/$attributeGroupId.attribute.new'
import { Route as AttributeGroupsAttributeGroupIdAttributeAttributeIdEditImport } from './routes/attribute-groups/$attributeGroupId.attribute.$attributeId.edit'

// Create/Update Routes

const LanguagesRoute = LanguagesImport.update({
  path: '/languages',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesRoute = CategoriesImport.update({
  path: '/categories',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsIndexRoute = ProductsIndexImport.update({
  path: '/products/',
  getParentRoute: () => rootRoute,
} as any)

const AttributeGroupsIndexRoute = AttributeGroupsIndexImport.update({
  path: '/attribute-groups/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsNewRoute = ProductsNewImport.update({
  path: '/products/new',
  getParentRoute: () => rootRoute,
} as any)

const LanguagesNewRoute = LanguagesNewImport.update({
  path: '/new',
  getParentRoute: () => LanguagesRoute,
} as any)

const CategoriesNewRoute = CategoriesNewImport.update({
  path: '/new',
  getParentRoute: () => CategoriesRoute,
} as any)

const AttributeGroupsNewRoute = AttributeGroupsNewImport.update({
  path: '/attribute-groups/new',
  getParentRoute: () => rootRoute,
} as any)

const AttributeGroupsAttributeGroupIdRoute =
  AttributeGroupsAttributeGroupIdImport.update({
    path: '/attribute-groups/$attributeGroupId',
    getParentRoute: () => rootRoute,
  } as any)

const LanguagesLanguageIdEditRoute = LanguagesLanguageIdEditImport.update({
  path: '/$languageId/edit',
  getParentRoute: () => LanguagesRoute,
} as any)

const CategoriesCategoryIdEditRoute = CategoriesCategoryIdEditImport.update({
  path: '/$categoryId/edit',
  getParentRoute: () => CategoriesRoute,
} as any)

const AttributeGroupsAttributeGroupIdEditRoute =
  AttributeGroupsAttributeGroupIdEditImport.update({
    path: '/edit',
    getParentRoute: () => AttributeGroupsAttributeGroupIdRoute,
  } as any)

const AttributeGroupsAttributeGroupIdAttributeNewRoute =
  AttributeGroupsAttributeGroupIdAttributeNewImport.update({
    path: '/attribute/new',
    getParentRoute: () => AttributeGroupsAttributeGroupIdRoute,
  } as any)

const AttributeGroupsAttributeGroupIdAttributeAttributeIdEditRoute =
  AttributeGroupsAttributeGroupIdAttributeAttributeIdEditImport.update({
    path: '/attribute/$attributeId/edit',
    getParentRoute: () => AttributeGroupsAttributeGroupIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/categories': {
      preLoaderRoute: typeof CategoriesImport
      parentRoute: typeof rootRoute
    }
    '/languages': {
      preLoaderRoute: typeof LanguagesImport
      parentRoute: typeof rootRoute
    }
    '/attribute-groups/$attributeGroupId': {
      preLoaderRoute: typeof AttributeGroupsAttributeGroupIdImport
      parentRoute: typeof rootRoute
    }
    '/attribute-groups/new': {
      preLoaderRoute: typeof AttributeGroupsNewImport
      parentRoute: typeof rootRoute
    }
    '/categories/new': {
      preLoaderRoute: typeof CategoriesNewImport
      parentRoute: typeof CategoriesImport
    }
    '/languages/new': {
      preLoaderRoute: typeof LanguagesNewImport
      parentRoute: typeof LanguagesImport
    }
    '/products/new': {
      preLoaderRoute: typeof ProductsNewImport
      parentRoute: typeof rootRoute
    }
    '/attribute-groups/': {
      preLoaderRoute: typeof AttributeGroupsIndexImport
      parentRoute: typeof rootRoute
    }
    '/products/': {
      preLoaderRoute: typeof ProductsIndexImport
      parentRoute: typeof rootRoute
    }
    '/attribute-groups/$attributeGroupId/edit': {
      preLoaderRoute: typeof AttributeGroupsAttributeGroupIdEditImport
      parentRoute: typeof AttributeGroupsAttributeGroupIdImport
    }
    '/categories/$categoryId/edit': {
      preLoaderRoute: typeof CategoriesCategoryIdEditImport
      parentRoute: typeof CategoriesImport
    }
    '/languages/$languageId/edit': {
      preLoaderRoute: typeof LanguagesLanguageIdEditImport
      parentRoute: typeof LanguagesImport
    }
    '/attribute-groups/$attributeGroupId/attribute/new': {
      preLoaderRoute: typeof AttributeGroupsAttributeGroupIdAttributeNewImport
      parentRoute: typeof AttributeGroupsAttributeGroupIdImport
    }
    '/attribute-groups/$attributeGroupId/attribute/$attributeId/edit': {
      preLoaderRoute: typeof AttributeGroupsAttributeGroupIdAttributeAttributeIdEditImport
      parentRoute: typeof AttributeGroupsAttributeGroupIdImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  AboutRoute,
  CategoriesRoute.addChildren([
    CategoriesNewRoute,
    CategoriesCategoryIdEditRoute,
  ]),
  LanguagesRoute.addChildren([LanguagesNewRoute, LanguagesLanguageIdEditRoute]),
  AttributeGroupsAttributeGroupIdRoute.addChildren([
    AttributeGroupsAttributeGroupIdEditRoute,
    AttributeGroupsAttributeGroupIdAttributeNewRoute,
    AttributeGroupsAttributeGroupIdAttributeAttributeIdEditRoute,
  ]),
  AttributeGroupsNewRoute,
  ProductsNewRoute,
  AttributeGroupsIndexRoute,
  ProductsIndexRoute,
])
